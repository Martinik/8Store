<script>

    let lostPets = [];
    let foundPets = [];
    let allPets = [];

    petsService.loadAllLostPets().then(function (lostPetsData) {
        petsService.loadAllFoundPets().then(function (foundPetsData) {
            lostPets = lostPetsData;
            foundPets = foundPetsData;
            allPets.push.apply(allPets, lostPets);
            allPets.push.apply(allPets, foundPets);
            initMap();
        })
    });

    function initMap() {

        // Create the map.
        let map = new google.maps.Map(document.getElementById('map'), {
            zoom: 4,
            center: {lat: 37.090, lng: -95.712},
            mapTypeId: 'hybrid',
        });

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                let pos = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };

                map.setCenter(pos);
            });
        }

        for (let pet of allPets) {
            if (pet.lat && pet.lng && pet.radius) {
                let petCoordinates = {lat: Number(pet.lat), lng: Number(pet.lng)};
                let marker;
                if(pet.petName) {
                    // Create marker for the location of the pet
                        marker = new google.maps.Marker({
                        position: petCoordinates,
                        map: map,
                        icon: "../img/icon-lost-map.png"
                    });
                } else {
                        marker = new google.maps.Marker({
                        position: petCoordinates,
                        map: map,
                        icon: "../img/icon-found-map.png"
                    });
                }

                google.maps.event.addListener(marker, 'click', function(ev){

                    let petCircle = new google.maps.Circle({
                        strokeColor: '#FF0000',
                        strokeOpacity: 0.8,
                        strokeWeight: 2,
                        fillColor: '#FF0000',
                        fillOpacity: 0.35,
                        map: map,
                        center: petCoordinates,
                        radius: Number(pet.radius)
                    });

                    let coordInfoWindow = new google.maps.InfoWindow();
                    google.maps.event.addListener(coordInfoWindow, 'closeclick', function (ev) {
                        petCircle.setMap(null);
                    });

                    coordInfoWindow.setContent(createInfoWindowContent(petCircle.center, map.getZoom()));
                    coordInfoWindow.setPosition(petCircle.center);
                    coordInfoWindow.open(map);
                });
            }
        }

        let TILE_SIZE = 256;

        function createInfoWindowContent(latLng, zoom) {
            let scale = 1 << zoom;

            let worldCoordinate = project(latLng);

            let pixelCoordinate = new google.maps.Point(
                    Math.floor(worldCoordinate.x * scale),
                    Math.floor(worldCoordinate.y * scale));

            let tileCoordinate = new google.maps.Point(
                    Math.floor(worldCoordinate.x * scale / TILE_SIZE),
                    Math.floor(worldCoordinate.y * scale / TILE_SIZE));

            return [
                'Chicago, IL',
                'LatLng: ' + latLng,
                'Zoom level: ' + zoom,
                'World Coordinate: ' + worldCoordinate,
                'Pixel Coordinate: ' + pixelCoordinate,
                'Tile Coordinate: ' + tileCoordinate
            ].join('<br>');
        }

        function project(latLng) {
            let siny = Math.sin(latLng.lat() * Math.PI / 180);

            siny = Math.min(Math.max(siny, -0.9999), 0.9999);

            return new google.maps.Point(
                    TILE_SIZE * (0.5 + latLng.lng() / 360),
                    TILE_SIZE * (0.5 - Math.log((1 + siny) / (1 - siny)) / (4 * Math.PI)));
        }
    }
</script>